To implement a Tetris game that runs in a Flask web application, we will need several components:

1. A Flask application to serve the game and handle requests.
2. A JavaScript file to handle the game logic on the client side.
3. HTML and CSS files to display the game in the browser.
4. A Python file to define the game logic on the server side.

Let's start with the Flask application.

app.py
```python
from flask import Flask, render_template, request
import game_logic

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/move', methods=['POST'])
def move():
    direction = request.form.get('direction')
    game_logic.move(direction)
    return 'OK'

if __name__ == '__main__':
    app.run(debug=True)
```

This file defines a Flask application with two routes. The first route serves the HTML file that displays the game. The second route handles POST requests to move the Tetris pieces.

Next, let's define the game logic on the server side.

game_logic.py
```python
class Game:
    def __init__(self):
        self.board = [[0 for _ in range(10)] for _ in range(20)]

    def move(self, direction):
        # Implement the logic to move the Tetris pieces
        pass

game = Game()

def move(direction):
    game.move(direction)
```

This file defines a `Game` class that represents the state of the Tetris game. The `move` function is a wrapper around the `Game.move` method that allows us to keep the game state between requests.

Next, let's create the HTML file that displays the game.

templates/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Tetris</title>
    <link rel="stylesheet" type="text/css" href="/static/styles.css">
</head>
<body>
    <div id="game-board"></div>
    <script src="/static/game.js"></script>
</body>
</html>
```

This file includes the CSS and JavaScript files that we will create next.

static/styles.css
```css
#game-board {
    width: 200px;
    height: 400px;
    border: 1px solid black;
}
```

This file defines the styles for the game board.

static/game.js
```javascript
// Implement the client-side game logic here
```

This file will contain the client-side game logic. It will make AJAX requests to the `/move` route to move the Tetris pieces.

Finally, we need to create a requirements.txt file to specify the Flask dependency.

requirements.txt
```
Flask==1.1.2
```

To run the application, you would first install the dependencies with `pip install -r requirements.txt`, and then run the Flask application with `python app.py`.

This concludes a fully working implementation.