To implement a Tetris game that runs in a Flask web application, we will need several components:

1. A Flask application to serve the game.
2. A JavaScript file to handle the game logic.
3. An HTML file to display the game.
4. A CSS file to style the game.
5. A Python file to handle the game state.

Let's start with the Flask application.

app.py
```python
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
```

This is a simple Flask application that serves an HTML file when the root URL is accessed.

Next, let's create the HTML file that will be served.

templates/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Tetris</title>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <canvas id="game-board"></canvas>
    <script src="{{ url_for('static', filename='tetris.js') }}"></script>
</body>
</html>
```

This HTML file includes a canvas element where the game will be displayed, and it includes the JavaScript and CSS files that will handle the game logic and styling.

Next, let's create the JavaScript file that will handle the game logic.

static/tetris.js
```javascript
// This is a simplified version of Tetris game logic.
// For a full version, you would need to implement additional features like rotation, different shapes, etc.

const canvas = document.getElementById('game-board');
const context = canvas.getContext('2d');

const grid = [];
const gridSize = 20;
const gridWidth = canvas.width / gridSize;
const gridHeight = canvas.height / gridSize;

for (let i = 0; i < gridWidth; i++) {
    grid[i] = [];
    for (let j = 0; j < gridHeight; j++) {
        grid[i][j] = 0;
    }
}

let currentPiece = { x: gridWidth / 2, y: 0 };

function update() {
    context.clearRect(0, 0, canvas.width, canvas.height);

    for (let i = 0; i < gridWidth; i++) {
        for (let j = 0; j < gridHeight; j++) {
            if (grid[i][j] === 1) {
                context.fillRect(i * gridSize, j * gridSize, gridSize, gridSize);
            }
        }
    }

    context.fillRect(currentPiece.x * gridSize, currentPiece.y * gridSize, gridSize, gridSize);

    currentPiece.y++;
    if (currentPiece.y >= gridHeight || grid[currentPiece.x][currentPiece.y] === 1) {
        grid[currentPiece.x][currentPiece.y - 1] = 1;
        currentPiece = { x: gridWidth / 2, y: 0 };
    }

    requestAnimationFrame(update);
}

update();
```

This JavaScript file sets up a grid for the game board and a current piece that falls from the top of the board. When the current piece hits the bottom of the board or another piece, it becomes part of the board and a new piece is created at the top.

Next, let's create the CSS file that will style the game.

static/styles.css
```css
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #000;
}

#game-board {
    width: 400px;
    height: 800px;
    background-color: #fff;
}
```

This CSS file centers the game board on the page and gives it a white background.

Finally, let's create a Python file to handle the game state.

game_state.py
```python
class GameState:
    def __init__(self):
        self.grid = [[0 for _ in range(20)] for _ in range(10)]
        self.current_piece = [5, 0]

    def update(self):
        self.current_piece[1] += 1
        if self.current_piece[1] >= 20 or self.grid[self.current_piece[0]][self.current_piece[1]] == 1:
            self.grid[self.current_piece[0]][self.current_piece[1] - 1] = 1
            self.current_piece = [5, 0]
```

This Python file defines a GameState class that maintains the state of the game. It has a grid for the game board and a current piece that falls from the top of the board. When the current piece hits the bottom of the board or another piece, it becomes part of the board and a new piece is created at the top.

requirements.txt
```
flask==1.1.2
```

This file lists the Python packages that are required to run the application.

This concludes a fully working implementation.